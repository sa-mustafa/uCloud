/*
 * uCloud API collection
 *
 * uCloud is a collection of image APIs.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: help@bps-eng.co.ir
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */

namespace Bps.uCloud.API.Controllers
{
    using System;
    using System.Linq;
    using System.Collections.Generic;
    using Microsoft.AspNetCore.Mvc;
    using Swashbuckle.AspNetCore.Annotations;
    using Swashbuckle.AspNetCore.SwaggerGen;
    using Newtonsoft.Json;
    using System.ComponentModel.DataAnnotations;
    using Bps.uCloud.API.Attributes;
    using Bps.uCloud.API.Security;
    using Microsoft.AspNetCore.Authorization;
    using Bps.uCloud.API.Models;
    using Bps.uCloud.API.Settings;
    using MassTransit;
    using Bps.uCloud.Contracts;
    using Bps.uCloud.Contracts.Entities;
    using System.Net.Mime;
    using System.Threading.Tasks;
    using MongoDB.Driver;
    using Microsoft.Extensions.Logging;
    using static Bps.uCloud.API.Extensions;

    /// <summary>
    /// 
    /// </summary>
    /// <remarks>The [ApiController] attribute makes model validation errors trigger BadRequest response.</remarks>
    [ApiController]
    [FormatFilter]
    public class FaceApiController : ControllerBase
    {
        #region Fields

        IAppSettings app;
        IBusControl bus;
        ISendEndpoint busSend;
        IMongoDatabase db;
        IMongoCollection<Item> items;
        IMongoCollection<Gallery> galleries;
        ILogger<FaceApiController> logger;
        string userId = "test";

        #endregion

        #region Constructor

        /// <summary>
        /// Initializes a new instance of the <see cref="FaceApiController"/> class.
        /// </summary>
        /// <param name="app">The application settings.</param>
        /// <param name="bus">The masstransit bus.</param>
        /// <param name="db">The mongo database object.</param>
        /// <param name="logger">The logger object.</param>
        public FaceApiController(IAppSettings app, IBusControl bus, IMongoDatabase db, ILogger<FaceApiController> logger)
        {
            this.app = app;
            this.bus = bus;
            this.db = db;
            this.logger = logger;

            using var endpoint = bus.GetSendEndpoint(SuggestQueueName("Face", "1.0", app));
            endpoint.Wait();
            busSend = endpoint.Result;

            items = db.GetCollection<Item>(nameof(Item));
            galleries = db.GetCollection<Gallery>(nameof(Gallery));
        }

        #endregion

        #region Methods

        /// <summary>
        /// Find galleries by names.
        /// </summary>
        /// <remarks>Multiple names can be provided with comma separated strings. Use name1,name2,name3, for example.</remarks>
        /// <param name="names">Names to filter by</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        [HttpGet]
        [Route("/ucloud/v1/gallery/find")]
        [ValidateModelState]
        [SwaggerOperation("GalleryFind")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Gallery>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        public virtual async Task<IActionResult> GalleryFind([FromQuery][Required()] List<string> names)
        {
            logger.LogTrace("Finding galleries by names {0}.", names.Aggregate((a, b) => { return $"{a},{b}"; }));
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Message = "Invalid name supplied" });

            var builder = Builders<Gallery>.Filter;
            var filter = builder.And
                (
                builder.Eq("UserId", userId),
                builder.Eq("Name", names.ToArray())
                );
            return Ok(await galleries.Find(filter).ToListAsync());
        }

        /// <summary>
        /// Identify image
        /// </summary>
        /// <remarks>Identify an image in the gallery.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="probe">Probe image to search</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="422">Invalid input</response>
        [HttpPost]
        [Route("/ucloud/v1/gallery/{name}/identify")]
        [ValidateModelState]
        [SwaggerOperation("GalleryIdentify")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Image>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        [Consumes(MediaTypeNames.Application.Json, MediaTypeNames.Application.Xml)]
        public virtual IActionResult GalleryIdentify([FromRoute][Required]string name, [FromBody]Image probe)
        {
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(List<Image>));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));
            string exampleJson = null;
            exampleJson = "[ {\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"source\" : \"source\",\n  \"type\" : \"url\"\n}, {\n  \"name\" : \"name\",\n  \"id\" : \"id\",\n  \"tag\" : \"tag\",\n  \"source\" : \"source\",\n  \"type\" : \"url\"\n} ]";

            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<List<Image>>(exampleJson)
            : default(List<Image>);            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// List galleries
        /// </summary>
        /// <remarks>Get the list of all galleries.</remarks>
        /// <response code="200">Successful operation</response>
        [HttpGet]
        [Route("/ucloud/v1/gallery")]
        [ValidateModelState]
        [SwaggerOperation("GalleryList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Gallery>), description: "Successful operation")]
        public virtual async Task<IActionResult> GalleryList()
        {
            //var client = bus.CreateRequestClient<EntityRequest<Gallery>>(app.QueueUri, app.QueueTimeout);
            //var response = client.GetResponse<IGallery[]>(Gallery.Request(Tasks.List, userId));
            logger.LogTrace("Querying galleries for user id {0}.", userId);
            return Ok(await galleries.Find(_ => _.UserId == userId).ToListAsync());
        }

        /// <summary>
        /// Create gallery
        /// </summary>
        /// <remarks>Create a new gallery where you can logically group several images.</remarks>
        /// <param name="gallery">Gallery for keeping images</param>
        /// <response code="201">Successfully created</response>
        /// <response code="409">Input already exists</response>
        /// <response code="422">Invalid input</response>
        [HttpPost]
        [Route("/ucloud/v1/gallery")]
        [ValidateModelState]
        [SwaggerOperation("GalleryNew")]
        [SwaggerResponse(statusCode: 201, type: typeof(ApiResponse), description: "Successfully created")]
        [SwaggerResponse(statusCode: 409, type: typeof(ApiResponse), description: "Input already exists")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        [Consumes(MediaTypeNames.Application.Json, MediaTypeNames.Application.Xml)]
        public virtual async Task<IActionResult> GalleryNew([FromBody] Gallery gallery)
        {
            gallery.UserId = userId;
            logger.LogTrace("Creating gallery {0}.", gallery.Id);
            if (!TryValidateModel(gallery, nameof(Gallery)))
                return UnprocessableEntity(new ApiResponse { Code = 422, Message = "Invalid input: gallery is invalid." });

            if (!(await galleries.FindAsync(_ => _.Id == gallery.Id)).FirstOrDefault().IsNull)
                return Conflict(new ApiResponse { Code = 409, Id = gallery.Name, Message = "Input already exists: use a different gallery name." });

            await galleries.InsertOneAsync(gallery); //await busSend.Send(Gallery.Request(Tasks.New, gallery))
            return CreatedAtAction("GalleryNew", new ApiResponse { Code = 201, Id = gallery.Name, Message = "Successfully created." });
        }

        /// <summary>
        /// Delete a gallery
        /// </summary>
        /// <remarks>Delete a gallery by name.</remarks>
        /// <param name="name">Gallery name to delete</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        [HttpDelete]
        [Route("/ucloud/v1/gallery/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GalleryRemove")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        public virtual async Task<IActionResult> GalleryRemove([FromRoute][Required][StringLength(256)] string name)
        {
            var id = Gallery.GenerateID(userId, name);
            logger.LogTrace("Deleting gallery {0}.", id);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            var gallery = await galleries.FindOneAndDeleteAsync(_ => _.Id == id); // await busSend.Send(Gallery.Request(Tasks.Remove, userId, id))
            if (gallery == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            await items.DeleteManyAsync(_ => _.GalleryId == id);
            return NoContent();
        }

        /// <summary>
        /// Update gallery
        /// </summary>
        /// <remarks>Update a gallery.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="gallery">Updated gallery data</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="422">Invalid input</response>
        [HttpPut]
        [Route("/ucloud/v1/gallery/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GalleryUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        public virtual async Task<IActionResult> GalleryUpdate([FromRoute][Required][StringLength(256)] string name, [FromBody] Gallery gallery)
        {
            var id = Gallery.GenerateID(userId, name);
            logger.LogTrace("Updating gallery {0}.", id);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            if (!TryValidateModel(gallery, nameof(Gallery)))
                return UnprocessableEntity(new ApiResponse { Code = 422, Id = name, Message = "Invalid input: gallery is invalid." });

            var old = await galleries.FindOneAndReplaceAsync(_ => _.Id == id, gallery);
            if (old == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            if (old.Name != gallery.Name)
            {
                var update = Builders<Item>.Update
                    .Set("GalleryId", gallery.Id);
                await items.UpdateManyAsync(_ => _.GalleryId == old.Id, update);
            }

            return Ok(new ApiResponse { Code = 200, Id = name, Message = "Successful operation" });
        }

        /// <summary>
        /// Update gallery with form data
        /// </summary>
        /// <remarks>Update a gallery with form data.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="data">Updated gallery data</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="422">Invalid input</response>
        [HttpPost]
        [Route("/ucloud/v1/gallery/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GalleryUpdateForm")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        public virtual IActionResult GalleryUpdateForm([FromRoute][Required]string name, [FromForm]string data)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"id\" : \"id\",\n  \"message\" : \"message\"\n}";
            exampleJson = "<null>\n  <code>123</code>\n  <id>aeiou</id>\n  <message>aeiou</message>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// View gallery
        /// </summary>
        /// <remarks>View a gallery by name.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        [HttpGet]
        [Route("/ucloud/v1/gallery/{name}")]
        [ValidateModelState]
        [SwaggerOperation("GalleryView")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        public virtual async Task<IActionResult> GalleryView([FromRoute][Required][StringLength(128)] string name)
        {
            //var client = bus.CreateRequestClient<EntityRequest<Gallery>>(app.QueueUri, app.QueueTimeout);
            //var response = await client.GetResponse<IGallery>(Gallery.Request(Tasks.View, userId, id));
            var id = Gallery.GenerateID(userId, name);
            logger.LogTrace("Querying gallery by id {0}.", id);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            var gallery = (await galleries.FindAsync(_ => _.Id == id)).First();
            if (gallery == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            return Ok(gallery);
        }

        /// <summary>
        /// List gallery images
        /// </summary>
        /// <remarks>Get the list of images in a gallery.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        [HttpGet]
        [Route("/ucloud/v1/gallery/{name}/images")]
        [ValidateModelState]
        [SwaggerOperation("ImagesList")]
        [SwaggerResponse(statusCode: 200, type: typeof(List<Image>), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        public virtual async Task<IActionResult> ImagesList([FromRoute][Required][StringLength(256)] string name)
        {
            //var client = bus.CreateRequestClient<EntityRequest<Item>>(app.QueueUri, app.QueueTimeout);
            //var response = await client.GetResponse<IItem[]>(Item.Request(Tasks.List, userId, id));
            var id = Gallery.GenerateID(userId, name);
            logger.LogTrace("Querying items for gallery id {0}.", id);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            var gallery = (await galleries.FindAsync(_ => _.Id == id)).First();
            if (gallery == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            return Ok(await items.Find(_ => _.GalleryId == id).ToListAsync());
        }

        /// <summary>
        /// Create image
        /// </summary>
        /// <remarks>Create a new image and enroll it into a gallery.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="image">Image data for enrollment</param>
        /// <response code="201">Successfully created</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="409">Input already exists</response>
        /// <response code="422">Invalid input</response>
        [HttpPost]
        [Route("/ucloud/v1/gallery/{name}/images")]
        [ValidateModelState]
        [SwaggerOperation("ImagesNew")]
        [SwaggerResponse(statusCode: 201, type: typeof(ApiResponse), description: "Successfully created")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 409, type: typeof(ApiResponse), description: "Input already exists")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        public virtual async Task<IActionResult> ImagesNew([FromRoute][Required]string name, [FromBody]Image image)
        {
            var id = Gallery.GenerateID(userId, name);
            var itemId = Item.GenerateID(id, image.Name);
            logger.LogTrace("Creating item {0}.", itemId);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            if (!TryValidateModel(image, nameof(Image)))
                return UnprocessableEntity(new ApiResponse { Code = 422, Id = name, Message = "Invalid input: image is invalid." });

            var gallery = (await galleries.FindAsync(_ => _.Id == id)).First();
            if (gallery == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            if (!(await items.FindAsync(_ => _.Id == itemId)).FirstOrDefault().IsNull)
                return Conflict(new ApiResponse { Code = 409, Id = name, Message = "Input already exists: use a different image name." });

            var item = new Item(image)
            {
                GalleryId = id,
                UserId = userId
            };
            await items.InsertOneAsync(item); //await busSend.Send(Item.Request(Tasks.New, userId, id, image.Name)
            return CreatedAtAction("ImagesNew", new ApiResponse { Code = 201, Id = item.Name, Message = "Successfully created." });
        }

        /// <summary>
        /// Delete an image
        /// </summary>
        /// <remarks>Delete an image by name.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="imageName">Image name to delete</param>
        /// <response code="204">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        [HttpDelete]
        [Route("/ucloud/v1/gallery/{name}/images/{imageName}")]
        [ValidateModelState]
        [SwaggerOperation("ImagesRemove")]
        [SwaggerResponse(statusCode: 204, description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        public virtual async Task<IActionResult> ImagesRemove([FromRoute][Required]string name, [FromRoute][Required]string imageName)
        {
            var id = Gallery.GenerateID(userId, name);
            var itemId = Item.GenerateID(id, imageName);
            logger.LogTrace("Deleting item {0}.", itemId);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            var item = await items.FindOneAndDeleteAsync(_ => _.Id == itemId); // await busSend.Send(Item.Request(Tasks.Remove, userId, id, imageId))
            if (item == null)
                return NotFound(new ApiResponse { Code = 404, Id = imageName, Message = "Name not found: use the ID returned when creating the image." });

            return NoContent();
        }

        /// <summary>
        /// Update image
        /// </summary>
        /// <remarks>Update an image in a gallery.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="imageName">Image name to update</param>
        /// <param name="image">Updated image data</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="422">Invalid input</response>
        [HttpPut]
        [Route("/ucloud/v1/gallery/{name}/images/{imageName}")]
        [ValidateModelState]
        [SwaggerOperation("ImagesUpdate")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        public virtual async Task<IActionResult> ImagesUpdate([FromRoute][Required]string name, [FromRoute][Required]string imageName, [FromBody]Image image)
        {
            var id = Gallery.GenerateID(userId, name);
            var itemId = Item.GenerateID(id, imageName);
            logger.LogTrace("Updating item {0}.", id);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            if (!TryValidateModel(image, nameof(Image)))
                return UnprocessableEntity(new ApiResponse { Code = 422, Id = name, Message = "Invalid input: data is invalid." });

            var item = new Item(image)
            {
                GalleryId = id,
                UserId = userId
            };
            var result = await items.ReplaceOneAsync(_ => _.Id == itemId, item);
            if (!result.IsAcknowledged)
                return NotFound(new ApiResponse { Code = 404, Id = imageName, Message = "Name not found: use the ID returned when creating the image." });

            return Ok(new ApiResponse { Code = 200, Id = imageName, Message = "Successful operation" });
        }

        /// <summary>
        /// Update image with form data
        /// </summary>
        /// <remarks>Update an image in a gallery with form data.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="imageName">Image name to update</param>
        /// <param name="image">Updated image data</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        /// <response code="422">Invalid input</response>
        [HttpPost]
        [Route("/ucloud/v1/gallery/{name}/images/{imageName}")]
        [ValidateModelState]
        [SwaggerOperation("ImagesUpdatePost")]
        [SwaggerResponse(statusCode: 200, type: typeof(ApiResponse), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        [SwaggerResponse(statusCode: 422, type: typeof(ApiResponse), description: "Invalid input")]
        public virtual IActionResult ImagesUpdatePost([FromRoute][Required]string name, [FromRoute][Required]string imageName, [FromForm][Required()]string image)
        { 
            //TODO: Uncomment the next line to return response 200 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(200, default(ApiResponse));

            //TODO: Uncomment the next line to return response 400 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(400, default(ApiResponse));

            //TODO: Uncomment the next line to return response 404 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(404, default(ApiResponse));

            //TODO: Uncomment the next line to return response 422 or use other options such as return this.NotFound(), return this.BadRequest(..), ...
            // return StatusCode(422, default(ApiResponse));

            string exampleJson = null;
            exampleJson = "{\n  \"code\" : 0,\n  \"id\" : \"id\",\n  \"message\" : \"message\"\n}";
            exampleJson = "<null>\n  <code>123</code>\n  <id>aeiou</id>\n  <message>aeiou</message>\n</null>";
            
            var example = exampleJson != null
            ? JsonConvert.DeserializeObject<ApiResponse>(exampleJson)
            : default(ApiResponse);
            //TODO: Change the data returned
            return new ObjectResult(example);
        }

        /// <summary>
        /// View image
        /// </summary>
        /// <remarks>View an image in a gallery. Only a thumbnail is stored on the server.</remarks>
        /// <param name="name">Gallery name to query</param>
        /// <param name="imageName">Image name to view</param>
        /// <response code="200">Successful operation</response>
        /// <response code="400">Invalid name supplied</response>
        /// <response code="404">Name not found</response>
        [HttpGet]
        [Route("/ucloud/v1/gallery/{name}/images/{imageName}")]
        [ValidateModelState]
        [SwaggerOperation("ImagesView")]
        [SwaggerResponse(statusCode: 200, type: typeof(Image), description: "Successful operation")]
        [SwaggerResponse(statusCode: 400, type: typeof(ApiResponse), description: "Invalid name supplied")]
        [SwaggerResponse(statusCode: 404, type: typeof(ApiResponse), description: "Name not found")]
        public virtual async Task<IActionResult> ImagesView([FromRoute][Required]string name, [FromRoute][Required]string imageName)
        {
            //var client = bus.CreateRequestClient<EntityRequest<Item>>(app.QueueUri, app.QueueTimeout);
            //var response = await client.GetResponse<IItem>(Item.Request(Tasks.View, userId, id, imageId));
            var id = Gallery.GenerateID(userId, name);
            var itemId = Item.GenerateID(id, imageName);
            logger.LogTrace("Querying item by id {0}.", itemId);
            if (!ModelState.IsValid)
                return BadRequest(new ApiResponse { Code = 400, Id = name, Message = "Invalid name supplied" });

            var gallery = (await galleries.FindAsync(_ => _.Id == id)).First();
            if (gallery == null)
                return NotFound(new ApiResponse { Code = 404, Id = name, Message = "Name not found: use the ID returned when creating the gallery." });

            var item = (await items.FindAsync(_ => _.Id == itemId)).First();
            if (item == null)
                return NotFound(new ApiResponse { Code = 404, Id = imageName, Message = "Name not found: use the ID returned when creating the image." });

            return Ok(item);
        }

        #endregion

    }
}
