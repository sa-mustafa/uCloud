/*
 * uCloud API collection
 *
 * uCloud is a collection of image APIs.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: help@bps-eng.co.ir
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Bps.uCloud.API.Models
{
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class ModelInstance : IEquatable<ModelInstance>
    {
        /// <summary>
        /// rotation angles of found instances of the model; applies to all except deformable/descriptor/perspective matchers.
        /// </summary>
        [DataMember(Name = "angles")]
        public List<float?> Angles { get; set; }

        /// <summary>
        /// rows of found instances of the model; applies to all except descriptor/perspective matchers.
        /// </summary>
        [DataMember(Name = "cols")]
        public List<float?> Cols { get; set; }

        /// <summary>
        /// columns of found instances of the model; applies to all except descriptor/perspective matchers.
        /// </summary>
        [DataMember(Name = "rows")]
        public List<float?> Rows { get; set; }

        /// <summary>
        /// scales of found instances; applies to isotropic matcher only.
        /// </summary>
        [DataMember(Name = "scales")]
        public List<float?> Scales { get; set; }

        /// <summary>
        /// scales of found instances in row direction; applies to anisotropic matcher only.
        /// </summary>
        [DataMember(Name = "scales_row")]
        public List<float?> ScalesRow { get; set; }

        /// <summary>
        /// scales of found instances in column direction; applies to anisotropic matcher only.
        /// </summary>
        [DataMember(Name = "scales_col")]
        public List<float?> ScalesCol { get; set; }

        /// <summary>
        /// homography transforms between found instances and the model; applies to descriptor &amp; perspective matchers only.
        /// </summary>
        [DataMember(Name = "transforms")]
        public List<float?> Transforms { get; set; }

        /// <summary>
        /// matching scores of found instances.
        /// </summary>
        [DataMember(Name = "scores")]
        public List<float?> Scores { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class ModelInstance {\n");
            sb.Append("  Angles: ").Append(Angles).Append("\n");
            sb.Append("  Cols: ").Append(Cols).Append("\n");
            sb.Append("  Rows: ").Append(Rows).Append("\n");
            sb.Append("  Scales: ").Append(Scales).Append("\n");
            sb.Append("  ScalesRow: ").Append(ScalesRow).Append("\n");
            sb.Append("  ScalesCol: ").Append(ScalesCol).Append("\n");
            sb.Append("  Transforms: ").Append(Transforms).Append("\n");
            sb.Append("  Scores: ").Append(Scores).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((ModelInstance)obj);
        }

        /// <summary>
        /// Returns true if ModelInstance instances are equal
        /// </summary>
        /// <param name="other">Instance of ModelInstance to be compared</param>
        public bool Equals(ModelInstance other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Angles == other.Angles ||
                    Angles != null &&
                    Angles.SequenceEqual(other.Angles)
                ) &&
                (
                    Cols == other.Cols ||
                    Cols != null &&
                    Cols.SequenceEqual(other.Cols)
                ) &&
                (
                    Rows == other.Rows ||
                    Rows != null &&
                    Rows.SequenceEqual(other.Rows)
                ) &&
                (
                    Scales == other.Scales ||
                    Scales != null &&
                    Scales.SequenceEqual(other.Scales)
                ) &&
                (
                    ScalesRow == other.ScalesRow ||
                    ScalesRow != null &&
                    ScalesRow.SequenceEqual(other.ScalesRow)
                ) &&
                (
                    ScalesCol == other.ScalesCol ||
                    ScalesCol != null &&
                    ScalesCol.SequenceEqual(other.ScalesCol)
                ) &&
                (
                    Transforms == other.Transforms ||
                    Transforms != null &&
                    Transforms.SequenceEqual(other.Transforms)
                ) &&
                (
                    Scores == other.Scores ||
                    Scores != null &&
                    Scores.SequenceEqual(other.Scores)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Angles != null)
                    hashCode = hashCode * 59 + Angles.GetHashCode();
                if (Cols != null)
                    hashCode = hashCode * 59 + Cols.GetHashCode();
                if (Rows != null)
                    hashCode = hashCode * 59 + Rows.GetHashCode();
                if (Scales != null)
                    hashCode = hashCode * 59 + Scales.GetHashCode();
                if (ScalesRow != null)
                    hashCode = hashCode * 59 + ScalesRow.GetHashCode();
                if (ScalesCol != null)
                    hashCode = hashCode * 59 + ScalesCol.GetHashCode();
                if (Transforms != null)
                    hashCode = hashCode * 59 + Transforms.GetHashCode();
                if (Scores != null)
                    hashCode = hashCode * 59 + Scores.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(ModelInstance left, ModelInstance right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(ModelInstance left, ModelInstance right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}