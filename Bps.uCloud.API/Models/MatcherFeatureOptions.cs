/*
 * uCloud API collection
 *
 * uCloud is a collection of image APIs.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: help@bps-eng.co.ir
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Bps.uCloud.API.Models
{
    /// <summary>
    /// select feature's options; applies only to feature matcher type.
    /// </summary>
    [DataContract]
    public partial class MatcherFeatureOptions : IEquatable<MatcherFeatureOptions>
    {
        /// <summary>
        /// Deeper feature's descriptor can better discriminate object points at the cost of more memory.
        /// </summary>
        [DataMember(Name = "depth")]
        public int? Depth { get; set; }

        /// <summary>
        /// Using more descriptors increases the matching robustness at the cost of runtime speed.
        /// </summary>
        [DataMember(Name = "count")]
        public int? Count { get; set; }

        /// <summary>
        /// length of a square created around a feature point for descriptor extraction
        /// </summary>
        [DataMember(Name = "patch_size")]
        public int? PatchSize { get; set; }

        /// <summary>
        /// enable perspective matching. When disabled, training time can be greatly reduced while still able to recognize objects in perspective.
        /// </summary>
        [DataMember(Name = "perspective")]
        public bool? Perspective { get; set; }

        /// <summary>
        /// smallest rotation of the model in degrees
        /// </summary>
        [DataMember(Name = "rotation_min")]
        public float? RotationMin { get; set; }

        /// <summary>
        /// largest rotation of the model in degrees
        /// </summary>
        [DataMember(Name = "rotation_max")]
        public float? RotationMax { get; set; }

        /// <summary>
        /// minimal scale of the model
        /// </summary>
        [DataMember(Name = "scale_min")]
        public float? ScaleMin { get; set; }

        /// <summary>
        /// maximal scale of the model
        /// </summary>
        [DataMember(Name = "scale_max")]
        public float? ScaleMax { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class MatcherFeatureOptions {\n");
            sb.Append("  Depth: ").Append(Depth).Append("\n");
            sb.Append("  Count: ").Append(Count).Append("\n");
            sb.Append("  PatchSize: ").Append(PatchSize).Append("\n");
            sb.Append("  Perspective: ").Append(Perspective).Append("\n");
            sb.Append("  RotationMin: ").Append(RotationMin).Append("\n");
            sb.Append("  RotationMax: ").Append(RotationMax).Append("\n");
            sb.Append("  ScaleMin: ").Append(ScaleMin).Append("\n");
            sb.Append("  ScaleMax: ").Append(ScaleMax).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((MatcherFeatureOptions)obj);
        }

        /// <summary>
        /// Returns true if MatcherFeatureOptions instances are equal
        /// </summary>
        /// <param name="other">Instance of MatcherFeatureOptions to be compared</param>
        public bool Equals(MatcherFeatureOptions other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return
                (
                    Depth == other.Depth ||
                    Depth != null &&
                    Depth.Equals(other.Depth)
                ) &&
                (
                    Count == other.Count ||
                    Count != null &&
                    Count.Equals(other.Count)
                ) &&
                (
                    PatchSize == other.PatchSize ||
                    PatchSize != null &&
                    PatchSize.Equals(other.PatchSize)
                ) &&
                (
                    Perspective == other.Perspective ||
                    Perspective != null &&
                    Perspective.Equals(other.Perspective)
                ) &&
                (
                    RotationMin == other.RotationMin ||
                    RotationMin != null &&
                    RotationMin.Equals(other.RotationMin)
                ) &&
                (
                    RotationMax == other.RotationMax ||
                    RotationMax != null &&
                    RotationMax.Equals(other.RotationMax)
                ) &&
                (
                    ScaleMin == other.ScaleMin ||
                    ScaleMin != null &&
                    ScaleMin.Equals(other.ScaleMin)
                ) &&
                (
                    ScaleMax == other.ScaleMax ||
                    ScaleMax != null &&
                    ScaleMax.Equals(other.ScaleMax)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                if (Depth != null)
                    hashCode = hashCode * 59 + Depth.GetHashCode();
                if (Count != null)
                    hashCode = hashCode * 59 + Count.GetHashCode();
                if (PatchSize != null)
                    hashCode = hashCode * 59 + PatchSize.GetHashCode();
                if (Perspective != null)
                    hashCode = hashCode * 59 + Perspective.GetHashCode();
                if (RotationMin != null)
                    hashCode = hashCode * 59 + RotationMin.GetHashCode();
                if (RotationMax != null)
                    hashCode = hashCode * 59 + RotationMax.GetHashCode();
                if (ScaleMin != null)
                    hashCode = hashCode * 59 + ScaleMin.GetHashCode();
                if (ScaleMax != null)
                    hashCode = hashCode * 59 + ScaleMax.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(MatcherFeatureOptions left, MatcherFeatureOptions right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(MatcherFeatureOptions left, MatcherFeatureOptions right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
