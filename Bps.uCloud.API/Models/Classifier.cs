/*
 * uCloud API collection
 *
 * uCloud is a collection of image APIs.
 *
 * OpenAPI spec version: 1.0.2
 * Contact: help@bps-eng.co.ir
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 */
using System;
using System.Linq;
using System.IO;
using System.Text;
using System.Collections;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.ComponentModel.DataAnnotations;
using System.Runtime.Serialization;
using Newtonsoft.Json;

namespace Bps.uCloud.API.Models
{ 
    /// <summary>
    /// 
    /// </summary>
    [DataContract]
    public partial class Classifier : IEquatable<Classifier>
    { 
        /// <summary>
        /// Gets or sets unique id or name
        /// </summary>
        [Required]
        [DataMember(Name="name")]
        public string Name { get; set; }

        /// <summary>
        /// Gets or Sets Tag
        /// </summary>
        [DataMember(Name="tag")]
        public string Tag { get; set; }

        /// <summary>
        /// Gets or Sets UseColorInfo
        /// </summary>
        [DataMember(Name="use_color_info")]
        public bool? UseColorInfo { get; set; }

        /// <summary>
        /// Gets or Sets UseTextureInfo
        /// </summary>
        [DataMember(Name="use_texture_info")]
        public bool? UseTextureInfo { get; set; }

        /// <summary>
        /// sample image resizing options
        /// </summary>
        /// <value>sample image resizing options</value>
        [JsonConverter(typeof(Newtonsoft.Json.Converters.StringEnumConverter))]
        public enum ResizeOptionsEnum
        {
            
            /// <summary>
            /// Enum NoneEnum for none
            /// </summary>
            [EnumMember(Value = "none")]
            NoneEnum = 1,
            
            /// <summary>
            /// Enum ScaleByEnum for scale_by
            /// </summary>
            [EnumMember(Value = "scale_by")]
            ScaleByEnum = 2,
            
            /// <summary>
            /// Enum ImageAreaEnum for image_area
            /// </summary>
            [EnumMember(Value = "image_area")]
            ImageAreaEnum = 3
        }

        /// <summary>
        /// sample image resizing options
        /// </summary>
        /// <value>sample image resizing options</value>
        [DataMember(Name="resize_options")]
        public ResizeOptionsEnum? ResizeOptions { get; set; }

        /// <summary>
        /// Gets or Sets ResizeValue
        /// </summary>
        [DataMember(Name="resize_value")]
        public float? ResizeValue { get; set; }

        /// <summary>
        /// Returns the string presentation of the object
        /// </summary>
        /// <returns>String presentation of the object</returns>
        public override string ToString()
        {
            var sb = new StringBuilder();
            sb.Append("class Classifier {\n");
            sb.Append("  Name: ").Append(Name).Append("\n");
            sb.Append("  Tag: ").Append(Tag).Append("\n");
            sb.Append("  UseColorInfo: ").Append(UseColorInfo).Append("\n");
            sb.Append("  UseTextureInfo: ").Append(UseTextureInfo).Append("\n");
            sb.Append("  ResizeOptions: ").Append(ResizeOptions).Append("\n");
            sb.Append("  ResizeValue: ").Append(ResizeValue).Append("\n");
            sb.Append("}\n");
            return sb.ToString();
        }

        /// <summary>
        /// Returns the JSON string presentation of the object
        /// </summary>
        /// <returns>JSON string presentation of the object</returns>
        public string ToJson()
        {
            return JsonConvert.SerializeObject(this, Formatting.Indented);
        }

        /// <summary>
        /// Returns true if objects are equal
        /// </summary>
        /// <param name="obj">Object to be compared</param>
        /// <returns>Boolean</returns>
        public override bool Equals(object obj)
        {
            if (ReferenceEquals(null, obj)) return false;
            if (ReferenceEquals(this, obj)) return true;
            return obj.GetType() == GetType() && Equals((Classifier)obj);
        }

        /// <summary>
        /// Returns true if Classifier instances are equal
        /// </summary>
        /// <param name="other">Instance of Classifier to be compared</param>
        /// <returns>Boolean</returns>
        public bool Equals(Classifier other)
        {
            if (ReferenceEquals(null, other)) return false;
            if (ReferenceEquals(this, other)) return true;

            return 
                (
                    Name == other.Name ||
                    Name != null &&
                    Name.Equals(other.Name)
                ) && 
                (
                    Tag == other.Tag ||
                    Tag != null &&
                    Tag.Equals(other.Tag)
                ) && 
                (
                    UseColorInfo == other.UseColorInfo ||
                    UseColorInfo != null &&
                    UseColorInfo.Equals(other.UseColorInfo)
                ) && 
                (
                    UseTextureInfo == other.UseTextureInfo ||
                    UseTextureInfo != null &&
                    UseTextureInfo.Equals(other.UseTextureInfo)
                ) && 
                (
                    ResizeOptions == other.ResizeOptions ||
                    ResizeOptions != null &&
                    ResizeOptions.Equals(other.ResizeOptions)
                ) && 
                (
                    ResizeValue == other.ResizeValue ||
                    ResizeValue != null &&
                    ResizeValue.Equals(other.ResizeValue)
                );
        }

        /// <summary>
        /// Gets the hash code
        /// </summary>
        /// <returns>Hash code</returns>
        public override int GetHashCode()
        {
            unchecked // Overflow is fine, just wrap
            {
                var hashCode = 41;
                // Suitable nullity checks etc, of course :)
                    if (Name != null)
                    hashCode = hashCode * 59 + Name.GetHashCode();
                    if (Tag != null)
                    hashCode = hashCode * 59 + Tag.GetHashCode();
                    if (UseColorInfo != null)
                    hashCode = hashCode * 59 + UseColorInfo.GetHashCode();
                    if (UseTextureInfo != null)
                    hashCode = hashCode * 59 + UseTextureInfo.GetHashCode();
                    if (ResizeOptions != null)
                    hashCode = hashCode * 59 + ResizeOptions.GetHashCode();
                    if (ResizeValue != null)
                    hashCode = hashCode * 59 + ResizeValue.GetHashCode();
                return hashCode;
            }
        }

        #region Operators
        #pragma warning disable 1591

        public static bool operator ==(Classifier left, Classifier right)
        {
            return Equals(left, right);
        }

        public static bool operator !=(Classifier left, Classifier right)
        {
            return !Equals(left, right);
        }

        #pragma warning restore 1591
        #endregion Operators
    }
}
